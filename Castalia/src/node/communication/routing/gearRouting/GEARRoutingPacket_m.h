//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/gearRouting/GEARRoutingPacket.msg.
//

#ifndef _GEARROUTINGPACKET_M_H_
#define _GEARROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "GeoRoutingPacket_m.h"
#include "VirtualMobilityManager.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/gearRouting/GEARRoutingPacket.msg:28</tt> by nedtool.
 * <pre>
 * enum GEARForwardingMode
 * {
 * 
 *     GEAR_GREEDY_ROUTING = 0;
 * }
 * </pre>
 */
enum GEARForwardingMode {
    GEAR_GREEDY_ROUTING = 0
};

/**
 * Class generated from <tt>src/node/communication/routing/gearRouting/GEARRoutingPacket.msg:32</tt> by nedtool.
 * <pre>
 * packet GEARRoutingPacket extends GeoRoutingPacket
 * {
 *     int routingMode = GEAR_GREEDY_ROUTING;    // M
 *     NodeLocation_type destinationLocation;      // D
 * }
 * </pre>
 */
class GEARRoutingPacket : public ::GeoRoutingPacket
{
  protected:
    int routingMode_var;
    NodeLocation_type destinationLocation_var;

  private:
    void copy(const GEARRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GEARRoutingPacket&);

  public:
    GEARRoutingPacket(const char *name=NULL, int kind=0);
    GEARRoutingPacket(const GEARRoutingPacket& other);
    virtual ~GEARRoutingPacket();
    GEARRoutingPacket& operator=(const GEARRoutingPacket& other);
    virtual GEARRoutingPacket *dup() const {return new GEARRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRoutingMode() const;
    virtual void setRoutingMode(int routingMode);
    virtual NodeLocation_type& getDestinationLocation();
    virtual const NodeLocation_type& getDestinationLocation() const {return const_cast<GEARRoutingPacket*>(this)->getDestinationLocation();}
    virtual void setDestinationLocation(const NodeLocation_type& destinationLocation);
};

inline void doPacking(cCommBuffer *b, GEARRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GEARRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GEARROUTINGPACKET_M_H_


//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/gearRouting/GEARHelloPacket.msg.
//

#ifndef _GEARHELLOPACKET_M_H_
#define _GEARHELLOPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "GeoPacket_m.h"
#include "VirtualMobilityManager.h"
// }}

/**
 * Class generated from <tt>src/node/communication/routing/gearRouting/GEARHelloPacket.msg:28</tt> by nedtool.
 * <pre>
 * packet GEARHelloPacket extends GeoPacket
 * {
 *     int geoPacketType = GEO_BEACON_PACKET;
 *     NodeLocation_type nodeLocation;
 *     double learnedCost;
 * }
 * </pre>
 */
class GEARHelloPacket : public ::GeoPacket
{
  protected:
    int geoPacketType_var;
    NodeLocation_type nodeLocation_var;
    double learnedCost_var;

  private:
    void copy(const GEARHelloPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GEARHelloPacket&);

  public:
    GEARHelloPacket(const char *name=NULL, int kind=0);
    GEARHelloPacket(const GEARHelloPacket& other);
    virtual ~GEARHelloPacket();
    GEARHelloPacket& operator=(const GEARHelloPacket& other);
    virtual GEARHelloPacket *dup() const {return new GEARHelloPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getGeoPacketType() const;
    virtual void setGeoPacketType(int geoPacketType);
    virtual NodeLocation_type& getNodeLocation();
    virtual const NodeLocation_type& getNodeLocation() const {return const_cast<GEARHelloPacket*>(this)->getNodeLocation();}
    virtual void setNodeLocation(const NodeLocation_type& nodeLocation);
    virtual double getLearnedCost() const;
    virtual void setLearnedCost(double learnedCost);
};

inline void doPacking(cCommBuffer *b, GEARHelloPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GEARHelloPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GEARHELLOPACKET_M_H_


//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/geoRouting/GeoRoutingControl.msg.
//

#ifndef _GEOROUTINGCONTROL_M_H_
#define _GEOROUTINGCONTROL_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "VirtualMobilityManager.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/geoRouting/GeoRoutingControl.msg:26</tt> by nedtool.
 * <pre>
 * enum GeoRoutingCommandDef
 * {
 * 
 *     SET_GEO_NODE_POS = 1;
 * }
 * </pre>
 */
enum GeoRoutingCommandDef {
    SET_GEO_NODE_POS = 1
};

/**
 * Class generated from <tt>src/node/communication/routing/geoRouting/GeoRoutingControl.msg:30</tt> by nedtool.
 * <pre>
 * message GeoRoutingControl
 * {
 *     int geoRoutingCommand @enum(GeoRoutingCommandDef);
 *     NodeLocation_type nodeLocation;
 * }
 * </pre>
 */
class GeoRoutingControl : public ::cMessage
{
  protected:
    int geoRoutingCommand_var;
    NodeLocation_type nodeLocation_var;

  private:
    void copy(const GeoRoutingControl& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GeoRoutingControl&);

  public:
    GeoRoutingControl(const char *name=NULL, int kind=0);
    GeoRoutingControl(const GeoRoutingControl& other);
    virtual ~GeoRoutingControl();
    GeoRoutingControl& operator=(const GeoRoutingControl& other);
    virtual GeoRoutingControl *dup() const {return new GeoRoutingControl(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getGeoRoutingCommand() const;
    virtual void setGeoRoutingCommand(int geoRoutingCommand);
    virtual NodeLocation_type& getNodeLocation();
    virtual const NodeLocation_type& getNodeLocation() const {return const_cast<GeoRoutingControl*>(this)->getNodeLocation();}
    virtual void setNodeLocation(const NodeLocation_type& nodeLocation);
};

inline void doPacking(cCommBuffer *b, GeoRoutingControl& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GeoRoutingControl& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GEOROUTINGCONTROL_M_H_


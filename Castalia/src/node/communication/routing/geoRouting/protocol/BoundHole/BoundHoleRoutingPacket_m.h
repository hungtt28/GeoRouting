//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/geoRouting/protocol/BoundHole/BoundHoleRoutingPacket.msg.
//

#ifndef _BOUNDHOLEROUTINGPACKET_M_H_
#define _BOUNDHOLEROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "GeoRoutingPacket_m.h"
#include "VirtualMobilityManager.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/geoRouting/protocol/BoundHole/BoundHoleRoutingPacket.msg:25</tt> by nedtool.
 * <pre>
 * enum BoundHoleForwardingMode
 * {
 * 
 *     BOUNDHOLE_GREEDY_ROUTING = 0;
 *     BOUNDHOLE_BOUNDHOLE_ROUTING = 1;
 * }
 * </pre>
 */
enum BoundHoleForwardingMode {
    BOUNDHOLE_GREEDY_ROUTING = 0,
    BOUNDHOLE_BOUNDHOLE_ROUTING = 1
};

/**
 * Class generated from <tt>src/node/communication/routing/geoRouting/protocol/BoundHole/BoundHoleRoutingPacket.msg:30</tt> by nedtool.
 * <pre>
 * packet BoundHoleRoutingPacket extends GeoRoutingPacket
 * {
 *     int routingMode = BOUNDHOLE_GREEDY_ROUTING;		// M
 *     NodeLocation_type destinationLocation;		// D
 *     NodeLocation_type startBoundHoleLocation;	// Lp
 *     int startIngressId = -1;
 *     int startBoundHoleId = -1;
 *     int holeId = -1;
 * }
 * </pre>
 */
class BoundHoleRoutingPacket : public ::GeoRoutingPacket
{
  protected:
    int routingMode_var;
    NodeLocation_type destinationLocation_var;
    NodeLocation_type startBoundHoleLocation_var;
    int startIngressId_var;
    int startBoundHoleId_var;
    int holeId_var;

  private:
    void copy(const BoundHoleRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BoundHoleRoutingPacket&);

  public:
    BoundHoleRoutingPacket(const char *name=NULL, int kind=0);
    BoundHoleRoutingPacket(const BoundHoleRoutingPacket& other);
    virtual ~BoundHoleRoutingPacket();
    BoundHoleRoutingPacket& operator=(const BoundHoleRoutingPacket& other);
    virtual BoundHoleRoutingPacket *dup() const {return new BoundHoleRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRoutingMode() const;
    virtual void setRoutingMode(int routingMode);
    virtual NodeLocation_type& getDestinationLocation();
    virtual const NodeLocation_type& getDestinationLocation() const {return const_cast<BoundHoleRoutingPacket*>(this)->getDestinationLocation();}
    virtual void setDestinationLocation(const NodeLocation_type& destinationLocation);
    virtual NodeLocation_type& getStartBoundHoleLocation();
    virtual const NodeLocation_type& getStartBoundHoleLocation() const {return const_cast<BoundHoleRoutingPacket*>(this)->getStartBoundHoleLocation();}
    virtual void setStartBoundHoleLocation(const NodeLocation_type& startBoundHoleLocation);
    virtual int getStartIngressId() const;
    virtual void setStartIngressId(int startIngressId);
    virtual int getStartBoundHoleId() const;
    virtual void setStartBoundHoleId(int startBoundHoleId);
    virtual int getHoleId() const;
    virtual void setHoleId(int holeId);
};

inline void doPacking(cCommBuffer *b, BoundHoleRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BoundHoleRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _BOUNDHOLEROUTINGPACKET_M_H_

